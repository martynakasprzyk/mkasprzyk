a) System kontroli wersji (ang. version/revision control system) pozwala na œledzenie zmian w plikach 
tekstowych, umo¿liwia pracê nad danym plikiem wielu osobom wskazuj¹c modyfikacje nanoszone przez konkretnych 
u¿ytkowników i zapewnia mo¿liwoœæ ³atwego dostrze¿enia i przywrócenia wszelkich modyfikacji wprowadzanych w 
konkretnym pliku. System Kontroli Wersji wykorzystywany jest najczêœciej przez programistów do edycji 
z³o¿onych projektów nad którymi pracuje wiele osób, ale mo¿na go wykorzystaæ do edycji i zarz¹dzania 
dowolnego tekstu.Wiele du¿ych projektów korzysta z GITa jako systemu kontroli wersji: Android, Digg, GIMP, 
jQuery, Linux, phpMyAdmin czy Symfony.

b) Pojêcie workflow jest u¿ywane w odniesieniu do oprogramowania, zw³aszcza s³u¿¹cego wspomagania pracy 
grupowej. Oprogramowanie takie pozwala na okreœlenie jakie role w przetwarzaniu dokumentów pe³ni¹ osoby 
uczestnicz¹ce w wykonywaniu danej czynnoœci oraz jakie s¹ stany poœrednie dokumentów. Jako przyk³ad mo¿na 
podaæ realizacjê obiegu delegacji w firmie. Osoby zlecaj¹ce wykonanie pracy zwi¹zanej z podró¿¹ s³u¿bow¹ 
generuj¹ dane wejœciowe (miejsce do którego ma dojechaæ okreœlony pracownik), powstaje dokument zg³oszenia 
delegacji. Dane s¹ nastêpnie odbierane przez osobê realizuj¹c¹ zadanie (proponowany jest np. termin wyjazdu,
rodzaj œrodka transportu itp.), ze zg³oszenia powstaje dokument delegacji. Informacje te trafiaj¹ z powrotem 
do decydentów, którzy akceptuj¹ informacje o realizacji zlecenia (np. zezwalaj¹ na przelot samolotem z 
Warszawy do Poznania), dokument delegacji zostaje zatwierdzony do wykonania. Pracownicy realizuj¹ zlecenie,
potwierdzaj¹ odbycie delegacji u klienta, dokument delegacji staje siê zrealizowany, po czym nastêpuje
akceptacja zwrotów kosztów podro¿y. Jak widaæ ka¿dy z etapów przetwarzania takiej informacji charakteryzuje 
siê okreœlonym zbiorem osób wykonuj¹cych okreœlone operacje na dokumentach oraz okreœlonym zestawem mo¿liwych
stanów dokumentu. S¹ to charakterystyczne cechy procesu workflow. Procesy workflow przedstawia siê zwykle w 
postaci grafu. Istnieje szereg narzêdzi komputerowego wspomagania tworzenia procesów workflow, w³¹cznie z 
narzêdziami pozwalaj¹cymi w sposób graficzny projektowaæ i programowaæ gotowe systemy przep³ywu informacji.

c) Scentralizowane systemy kontroli wersji s¹ oparte na architekturze klient-serwer (np. CVS, Subversion), a 
rozproszone systemy kontroli wersji s¹ oparte na architekturze P2P (np. BitKeeper, Code Co-op, svk, Git). W 
tych pierwszych istnieje jedno centralne repozytorium, z którym wszyscy u¿ytkownicy systemu synchronizuj¹ 
swoje zmiany, a te drugie pozwalaj¹ na prowadzenie równoprawnych, niezale¿nych ga³êzi, które mo¿na dowolnie 
synchronizowaæ ze sob¹ nawzajem, np. poprzez e-mail (Code Co-op). Wybór odpowiedniego typu systemu kontroli 
wersji zale¿y od potrzeb projektu.

d) polecenia:
init - tworzenie nowego repozytorium;
clone - clonowanie istniej¹cego repozytorium;
add - dodaje zmienione pliki do wirtualnej listy;
status - polecenie wyœwietli aktualny status pracy nad projektem. Dziêki niemu zobaczysz które pliki by³y 
modyfikowane, ale nie zosta³y jeszcze zapisane poleceniem commit;
diff - wyœwietla zmiany w repozytorium;
commit - tym poleceniem zapiszemy aktualny stan naszego projektu;
reset - resetuje zmiany w lokalnym repozytorium;
rm - usuwa plik z katalogu roboczego;
mv - zmiana nazwy pliku w repozytorium;
branch - Wyœwietla informacje o branch'ach dostêpnych w repozytorium;
checkout - prze³¹czanie siê pomiêdzy ró¿nymi ga³êziami kodu w naszym projekcie ;
merge - ³¹czy obie ga³êzie rozwi¹zuj¹c konflikty;
log - to polecenie s³u¿y nam do przejrzenia historii zmian dokonanych w projekcie;
stash - pozwala na chwilowe “odsuniêcie” aktualnie wprowadzonych do projektu zmian bez koniecznoœci 
commitowania ich;
pull - pobranie plików ze zdalnego repozytorium i automatyczne wykonanie merge;
push - wys³anie zmian na zdalny serwer;